––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
 BIOCBOT
 Team: 2 devs + 1 technical manager
 Start date: next Monday
Phase 0 – Navigable Interface Mock‑Up (8 steps)
Goal: Set up some navigable interfaces so that we have a general idea of how the website navigation is going to be, but it does not need to be connected to any real componenrts
PHASE 1 – Content‑to‑Vector Pipeline MVP
 Goal: instructor can upload text or PDF, it is parsed → chunked → embedded → stored in Qdrant; search returns matching chunks.
 Detailed task list appears further below.
PHASE 2 – Student Chat MVP
 Goal: a student logs in, asks a question, gets an answer generated through RAG that cites course materials. Includes flagging bad answers.
 Detailed task list appears further below.
PHASE 3 – Instructor Dashboard 
 Goal: instructor can view uploads per unit, toggle publish, see daily flag digest, export CSV, delete or replace material, and re‑index.
PHASE 4 – QA, Security, Analytics
 Goal: accessibility checks, WCAG AA compliance tweaks, SAML flow hardened, profanity/personal‑info agent live, metrics to Mongo.
PHASE 5 – Launch & Transition 
 Goal: staging → prod promotion, smoke tests, hand‑off docs, post‑launch bugfix window defined.
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
Phase 0 tasks (finish today)
 	0.1 Scaffold folders/files (public/, css/, js/, views/)
0.2 Create index.html with semantic nav bar and <main id="app"> placeholder
0.3 Add styles.css for layout + WCAG‑AA hover/focus states
0.4 Implement router.js (hash‑based router with guard‑clause fallback)
0.5 Add placeholder views: upload.html, chat.html, dashboard.html
0.6 Create env-config.js and read API_BASE_URL from window.__ENV
0.7 Manual QA with live‑server – verify keyboard nav & hash routes
0.8 Commit & push branch dev (“phase‑0: navigable UI mock‑up”)
PHASE 1 TASKS AND SUB‑TASKS
Baseline verification - GOOD
 1.1 Pull and run qdrant/qdrant via docker compose up
 1.2 Run hello‑world Ollama, confirm nomic‑embed‑text loaded
 1.3 Spin up local Mongo instance (docker‑compose service)


Add toolkit dependencies - GOOD
 2.1 npm i ubc‑genai‑toolkit‑{core,llm,document‑parsing,chunking,embeddings}


Document‑parsing service - GOOD (EXPAND MORE)
 3.1 Accept multipart upload, detect MIME, route to parser (NEED TO LOOK AT LIBRARIES, toolkit)
 3.2 Use toolkit document‑parsing: PDF→text, DOCX→text, TXT passthrough
 3.3 Return raw text plus file metadata (name, size, md5)


Chunking module - GOOD 
 4.1 Pull default params from .env (CHUNK_SIZE, CHUNK_OVERLAP)
 4.2 Wrap toolkit‑chunking into util chunkText(text, opts)


Embedding + upsert - GOOD (ask rich, maybe open ai embeddings)
 5.1 Initialise toolkit‑embeddings client with Ollama endpoint
 5.2 Ensure Qdrant collection exists with correct dim and distance
 5.3 For each chunk produce embedding, upsert with payload
 5.4 Fail‑fast on dimension mismatch, instruct dev to purge collection


Search endpoint (similar to example app?) - GOOD (bring on chunk or the entire pdf)
 6.1 POST /search {query, topK?}
 6.2 Embed query, similarity search in Qdrant, return array of hits
 id, score, chunkText, fullDocumentId


README + Postman collection - GOOD
 8.1 Update repo README with new env vars and curl examples
 8.2 Export Postman file, commit to /docs
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
 PHASE 2 TASKS AND SUB‑TASKS
Auth shell - GOOD
 1.1 Plug in mock SAML flow using UBC test IdP
 1.2 Store session in Mongo, issue JWT to frontend


Chat service - GOOD
 2.1 POST /chat {message, mode}
 2.2 Retrieve relevant chunks (toolkit‑rag retrieve)
 2.3 Build context window with citations
 2.4 Call toolkit‑rag generate via LLM module (llama3‑8B or local)


Mode toggle logic - GOOD (might be janking)
 3.1 Calibration quiz stub: multiple choice scored locally
 3.2 If score < threshold → protégé, else tutor
 3.3 Store chosen mode in session


Flagging pipeline - GOOD
 4.1 Add three‑dot menu on message bubble → “Report answer”
 4.2 POST /flag with comment; store in Mongo flags collection
 4.3 Return toast “Thank you for flagging”


Rate limiter and profanity guard - GOOD
 5.1 Simple per‑user 20 req / 5 min Redis bucket
 5.2 Toolkit‑agent profanity filter on incoming student text
 5.3 On violation #1 → warning; #2 → insert instructor flag


Basic student UI
 6.1 component ChatScreen:
 message list, input box, mode toggle
 6.2 Display citation footnotes linking back to source filename + page			      6.3 Persistent storage with MongoDB


Metrics and logging
 7.1 Middleware logs: latency, prompt tokens, completion tokens
 7.2 Daily roll‑up job writes summary doc to Mongo analytics
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
PHASE 3 – INSTRUCTOR DASHBOARD AND COURSE ADMIN
Course selection and role gating
 1.1 Canvas / Workday API mock: return list of courses for instructor_id
 1.2 GET /courses populates dropdown on login
 1.3 Store chosen courseId in JWT claim and session


Materials manager UI
 2.1 sidebar: accordion per unit; create units on first visit
 2.2 Drag‑and‑drop upload zone inside each unit panel
 2.3 File list shows: filename, size, status (parsed / needs‑verify / error)
 2.4 Delete / replace button triggers soft‑delete in Mongo and Qdrant purge


Learning objectives and quiz authoring
 3.1 Editable list component, autosave every blur
 3.2 Button “Generate probe questions” → POST /gen‑probe; server calls LLM with learning objectives and stores questions
 3.3 Quiz preview modal, allow instructor to edit any auto‑generated Q


Publish toggle
 4.1 Each unit row has a publish switch; backend sets published=true
 4.2 Student retrieval pipeline filters out unpublished units


Flags queue and daily digest
 5.1 Flags collection index by courseId status=‘open’
 5.2 Instructor dashboard tab lists open flags with approve / reject / escalate buttons
 5.3 Cron job 06 00 UTC builds email digest grouped by course, sends via nodemailer
 5.4 Toggle in settings to enable / disable digest


Export and logs
 6.1 “Download All Chat Logs” button → server pipes mongoexport to ZIP, streams to browser
 6.2 CSV analytics export: fields sessionId, userId, mode, tokens, latency


Re‑index and duplicate detection
 7.1 Button “Re‑index course” triggers background worker: delete collection, reprocess all files with current chunk params
 7.2 Duplicate detector: md5+size hash; show warning if file already uploaded


Instructor settings
 8.1 Input for default calibration question count
 8.2 Rate‑limit override: max daily tokens per student
 8.3 Save writes to course_settings collection
––––––––––––––––––––––––––––––––––––––––––––––––––––––––––––
 PHASE 4 – HARDENING, SECURITY, ANALYTICS, ACCESSIBILITY 
SAML production flow
 1.1 Swap mock IdP for real CWL staging IdP
 1.2 Map SAML attributes → internal roles (student, TA, instructor)
 1.3 Add forced re‑auth after 24 h inactivity


Privacy and PII scrubber
 2.1 Extend profanity agent to detect emails, phone numbers, SIN patterns
 2.2 Replace detected PII with [REDACTED], log hash of original


Token accounting and cost guard
 3.1 Middleware records prompt_tokens, completion_tokens; write to Redis counter
 3.2 If user exceeds daily quota → return 429 with nice message
 3.3 Admin override endpoint to reset quota


Observability pipeline
 4.1 Integrate Winston logger with daily rotate into /var/log/biocbot
 4.2 Metrics exporter pushes to Prometheus endpoint every 30 s
 4.3 Grafana dashboard: requests per minute, median latency, top 5 error codes


Accessibility fixes
 6.1 Run axe‑core audit → fix color contrast, aria‑label, keyboard nav
 6.2 Add text‑size toggle and prefers‑reduced‑motion media queries
 6.3 Screen‑reader walkthrough with VoiceOver on Mac (WCAG AA compliant)
