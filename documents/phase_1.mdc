# Phase 1 – Content-to-Vector Pipeline MVP

> Goal: Instructor can upload text or PDF, it is parsed → chunked → embedded → stored in Qdrant; search returns matching chunks.

## Checklist

### Baseline Verification
- [ ] **1.1 Qdrant Setup**
    - [ ] Pull and run `qdrant/qdrant` using `docker compose up`
    - [ ] Confirm Qdrant is live on port 6333
- [ ] **1.2 Ollama Setup**
    - [ ] Run hello-world Ollama
    - [ ] Confirm `nomic-embed-text` model is loaded
- [ ] **1.3 MongoDB Setup**
    - [ ] Spin up local MongoDB instance (docker-compose service)
    - [ ] Confirm MongoDB is accessible

### Add Toolkit Dependencies
- [ ] **2.1 Install UBC GenAI Toolkit**
    - [ ] Run `npm i ubc-genai-toolkit-core ubc-genai-toolkit-llm ubc-genai-toolkit-document-parsing ubc-genai-toolkit-chunking ubc-genai-toolkit-embeddings`
    - [ ] Verify dependencies are listed in `package.json`

### Document Parsing Service
- [ ] **3.1 File Upload Endpoint**
    - [ ] Accept multipart file upload in backend
    - [ ] Detect MIME type (PDF, DOCX, TXT)
    - [ ] Route file to appropriate parser
- [ ] **3.2 Parse Document**
    - [ ] Use toolkit document-parsing to convert PDF/DOCX to text
    - [ ] Pass through TXT files as-is
    - [ ] Handle errors and invalid files
- [ ] **3.3 Return Metadata**
    - [ ] Return raw text and file metadata (name, size, md5) in response

### Chunking Module
- [ ] **4.1 Chunking Params**
    - [ ] Pull default params from `.env` (CHUNK_SIZE, CHUNK_OVERLAP)
- [ ] **4.2 Chunking Utility**
    - [ ] Wrap toolkit-chunking into a utility function `chunkText(text, opts)`
    - [ ] Add inline comments for clarity

### Embedding + Upsert
- [ ] **5.1 Embeddings Client**
    - [ ] Initialise toolkit-embeddings client with Ollama endpoint
- [ ] **5.2 Qdrant Collection**
    - [ ] Ensure Qdrant collection exists with correct dimension and distance
- [ ] **5.3 Embedding & Upsert**
    - [ ] For each chunk, produce embedding and upsert with payload
- [ ] **5.4 Dimension Mismatch Handling**
    - [ ] Fail-fast on dimension mismatch
    - [ ] Instruct dev to purge collection if mismatch occurs

### Search Endpoint
- [ ] **6.1 Implement Search API**
    - [ ] Create POST `/search` endpoint accepting `{query, topK?}`
    - [ ] Embed query and perform similarity search in Qdrant
    - [ ] Return array of hits: id, score, chunkText, fullDocumentId

### Documentation & Testing
- [ ] **8.1 Update README**
    - [ ] Add new env vars and curl examples
- [ ] **8.2 Export Postman Collection**
    - [ ] Export Postman file and commit to `/docs`